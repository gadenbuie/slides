---
title: "epoxy"
subtitle: "super glue for data-driven reports and Shiny apps"

author:
  - Garrick Aden-Buie
  - "<code>posit::conf(2023)</code>"

format:
  revealjs:
    theme:
      - scss/slides.scss
      - scss/utilities.scss
      - scss/typewriter.scss
    width: 100%
    height: 100%
    margin: 0
    code-copy: false
    code-line-numbers: false

engine: knitr

editor:
  render-on-save: true
---

```{r setup, include=FALSE}
library(epoxy)
options(width = 120)
source("R/utils.R")
```

## {.center}

::: {.d-flex .flex-column .align-items-center}
::: quote-sans
<div>Infant day care costs</div>
<div>up to [$15,417]{.text-orange} a year</div>
:::
:::

::: notes
As a parent, this is more than just a number...

But as a data scientist... I can't help but think about how that number got there.
:::

## {.center}

<!-- type out quote up to number -->

::: {.d-flex .flex-column .align-items-center}
::: quote-sans
<div class="d-if"><div class="d-ib typewriter" data-id="preamble" style="--steps:22;--blinks:0">Infant day care costs</div></div><br>
<div class="d-if"><div class="d-ib typewriter" data-id="before" style="--steps:6;--delay:1680ms;--blinks:50">up to&nbsp;</div></div>
:::
:::


## {.center}

<!-- copy paste the number -->

::: {.d-flex .flex-column .align-items-center}
::: quote-sans
<div class="d-ib" data-id="preamble">Infant day care costs</div> \
<div class="d-ib" data-id="before">up to</div>
<div class="d-if" style="width:min-content"><div class="d-ib text-orange typewriter" data-id="var" style="--duration:500ms;--steps:1;--blinks:2">$15,417</div></div>
<div class="d-if"><div class="d-ib typewriter" data-id="after" style="--delay:2s;--steps:5;--blinks:3">a year</div></div>
:::
:::

## {auto-animate="true"}

<!-- now in an Rmd -->

:::: {.content .d-flex .flex-column .justify-content-center}

::: {.code-chunk .offscreen-up style="font-size: 4vw" data-id="code-chunk"}
&#x60;&#x60;&#x60;{r} \
max_med_cost <- \
&nbsp;&nbsp;childcare_costs |> \
&nbsp;&nbsp;[# group and summarize... |>]{.text-muted} \
&nbsp;&nbsp;filter(cost = max(cost)) |> \
&nbsp;&nbsp;pull(cost) \ \
&#x60;&#x60;&#x60;
:::

::: {.d-flex .flex-column .align-items-center}
::: {.quote-code}
<div class="d-if"><div class="d-ib typewriter" data-id="preamble" style="--steps:22;--blinks:0">Infant day care costs</div></div><br>
<div class="d-if"><div class="d-ib typewriter" data-id="before" style="--steps:6;--delay:1680ms;--blinks:50">up to&nbsp;</div></div>
<div>&nbsp;<!-- placeholder for last line --></div>
:::
:::
::::

## {.p-10 auto-animate="true"}

<!-- reveal code chunk -->

:::: {.content .d-flex .flex-column .justify-content-center}

::: {.code-chunk .mb-6 style="font-size: 4vw;" data-id="code-chunk"}
&#x60;&#x60;&#x60;{r} \
max_med_cost <- \
&nbsp;&nbsp;childcare_costs |> \
&nbsp;&nbsp;[# group and summarize... |>]{.text-muted} \
&nbsp;&nbsp;filter(cost = max(cost)) |> \
&nbsp;&nbsp;pull(cost) \ \
&#x60;&#x60;&#x60;
:::

::: {.quote-code style="font-size: 4vw; line-height: 1.2;"}
<div>Infant day care costs</div>
<div class="d-if"><div class="typewriter" style="--steps:1;--duration:10ms;--blinks:50">up to&nbsp;</div></div>
<div>&nbsp;<!-- placeholder for last line --></div>
:::
::::



## {.p-10 auto-animate="true" auto-animate-unmatched="false"}

<!-- highlight variable and type it out -->

:::: {.content .d-flex .flex-column .justify-content-center}

::: {.ff-mono .mb-6 style="font-size: 4vw; background:var(--gray-1);"}
&#x60;&#x60;&#x60;{r} \
[max_med_cost]{.text-orange .fw-6} <- \
&nbsp;&nbsp;childcare_costs |> \
&nbsp;&nbsp;[# group and summarize... |>]{.text-muted} \
&nbsp;&nbsp;filter(cost = max(cost)) |> \
&nbsp;&nbsp;pull(cost) \ \
&#x60;&#x60;&#x60;
:::

::: {.quote-code style="font-size: 4vw; line-height: 1.2;" data-id="quote"}
<div>Infant day care costs</div>
<div>up to
<div class="d-if"><div class="d-ib typewriter" style="--delay:1s;--steps:17;--blinks:0;">[&#x60;r [max_med_cost]{.text-orange}&#x60;]{.text-blue}</div></div>
</div>
<div><div class="d-if"><div class="d-ib typewriter" style="--delay:2360ms;--steps:6;--blinks:2;">a year.</div></div></div>
:::
::::

## {.p-10 auto-animate="true"}

<!-- promise and magic of rmd -->

:::: {.content .d-flex .flex-column .justify-content-center}

::: {.quote-code .text-muted data-id="quote"}
<div>Infant day care costs</div>
<div>up to [&#x60;r [max_med_cost]{.text-orange}&#x60;]{.text-blue}</div>
<div>a year.</div>
:::
::::

::: notes
This is the promise and magic of R Markdown.

* prose in same document as code
* reproducible writing
* update data or analysis and re-render
* output changes!

When rendered, max median cost is woven into the prose...
:::

## {.p-10 transition="fade"}

<!-- rendered version of the document, number isn't great -->

:::: {.content .d-flex .flex-column .justify-content-center}

```{r}
#| include: false
max_med_cost <- 15416.96
```

::: {.quote-sans style="color: var(--gray-7);"}
<div>Infant day care costs</div>
<div>up to [`r max_med_cost`]{.text-orange .d-ib data-id="quote-var"}</div>
<div>a year.</div>
:::
::::

::: notes
There's a lot to love about R Markdown,
:::

## Which plot would you send to a client? {.p-10 transition="slide"}


::: {.content .d-flex .flex-row .gap-9 .mt-8 .justify-content-center}

::: {.flex-center .w-100 .h-60 style="background-color:var(--gray-3);"}
Plot with bad labels
:::

::: {.flex-center .w-100 .h-60 style="background-color:var(--purple);color:white;"}
Plot with good labels
:::
:::

::: notes
* effective communication
* without taking you out of the flow of writing
:::

## {.p-10}

::: content-center

```{r}
#| echo: false
fake_chunk(
  class = "fs-4vw",
  engine = "epoxy",
  "Infant day care costs
up to {.dollar max_med_cost}
a year."
)
```

* From Rmd text, wrap the text in an epoxy chunk
* replace back-tick r with braces
* Insert the `.dollar` formatter
* render...

:::

## {.p-10}

::: content-center
::: quote-sans
<div>Infant day care costs</div>
<div>up to [$15,417]{.text-orange} a year</div>
:::
:::

## {.p-10}

```{r}
#| include: false
childcare_summary <- readr::read_rds("data-raw/childcare_summary_top_10.rds")
```

::: content-center

```{epoxy .data = childcare_summary[1, ]}
| Variable | Value | Inline | Result |
|:---------|:------|:-------|:-------|
| `max_med_cost` | {max_med_cost} | `.dollar` | {.dollar max_med_cost} |
| `mhi_pct` | {mhi_pct} | `.percent` | {.percent mhi_pct} |
| `county_pop_med` | {county_pop_med} | `.number` | {.comma county_pop_med} |
| `cost_rank` | {cost_rank} | `.ordinal` | {.ordinal cost_rank} |
| `age` | {age} | `.titlecase` | {.titlecase age} |
| `county_size` | {county_size} | `.strong` | {.strong county_size} |
| `type` | {type} | `.emph` | {.emph type} |
```

:::

## {.p-10}

::: {.content-center}
Write out a full sentence using these variables in an epoxy chunk.
Make sure that the chunk has a name.

Assumes we've pulled the data out into individual variables
:::

## {.p-10}

<!-- of course we probably have this in a data frame -->

::: {.content-center style="font-size:2.5vw;"}
```{r}
#| echo: true
childcare_summary
```
:::

## {.p-10}

::: {.content}
Update the epoxy chunk to use the `.data` argument
and the first row of `childcare_summary`
(these are the values)

```{epoxy .data = childcare_summary[1, ]}
| Variable | Value | Inline | Result |
|:---------|:------|:-------|:-------|
| `max_med_cost` | {max_med_cost} | `.dollar` | {.dollar max_med_cost} |
| `mhi_pct` | {mhi_pct} | `.percent` | {.percent mhi_pct} |
| `county_pop_med` | {county_pop_med} | `.number` | {.comma county_pop_med} |
| `cost_rank` | {cost_rank} | `.ordinal` | {.ordinal cost_rank} |
| `age` | {age} | `.titlecase` | {.titlecase age} |
| `county_size` | {county_size} | `.strong` | {.strong county_size} |
| `type` | {type} | `.emph` | {.emph type} |
```
:::

## {.p-10}


::: {.content}
then swap out for the 8th row
which effectively compares day care to home care

```{epoxy .data = childcare_summary[8, ]}
| Variable | Value | Inline | Result |
|:---------|:------|:-------|:-------|
| `max_med_cost` | {max_med_cost} | `.dollar` | {.dollar max_med_cost} |
| `mhi_pct` | {mhi_pct} | `.percent` | {.percent mhi_pct} |
| `county_pop_med` | {county_pop_med} | `.number` | {.comma county_pop_med} |
| `cost_rank` | {cost_rank} | `.ordinal` | {.ordinal cost_rank} |
| `age` | {age} | `.titlecase` | {.titlecase age} |
| `county_size` | {county_size} | `.strong` | {.strong county_size} |
| `type` | {type} | `.emph` | {.emph type} |
```
:::

## {.p-10}

Then highlight the chunk name and use `data |> filter |> epoxy_use_chunk()`.

## {.p-10}

Inline transformers are tiny functions that take a single input
and return text.

* `.dollar` is `scales::label_dollar()`
* `.percent` is `scales::label_percent()`

## {.p-10}

What if you want to change the default behavior?

```{r}
#| echo: true
#| output: asis
epoxy(
  "{.dollar max_med_cost} represents {.percent mhi_pct} of median household income.",
  .data = childcare_summary[1, ]
)
```

Use `epoxy_transform_set()`

```{r}
#| echo: true
#| output: asis
epoxy(
  "{.dollar max_med_cost} represents {.percent mhi_pct} of median household income.",
  .data = childcare_summary[1, ],
  .transformer = epoxy_transform_inline(
    .dollar = scales::label_dollar(accuracy = 10),
    .percent = scales::label_percent(accuracy = 0.1)
  )
)
```

## {.p-10}

Let's make our own inline transformer.
This currently isn't a great example.
The example should showcase that chunks are vectorized

```{r}
#| echo: true
#| output: asis
epoxy_transform_set(
  .fa = function(x) purrr::map_chr(x, fontawesome::fa, a11y = "sem"),
)

tasks <- c("Use", "Make", "Enjoy the")
icons <- c("r-project", "sack-dollar", "umbrella-beach")

epoxy(
  "- {tasks} {.fa icons}"
)
```
