---
title: "epoxy"
subtitle: "super glue for data-driven reports and Shiny apps"

author:
  - Garrick Aden-Buie
  - "<code>posit::conf(2023)</code>"

format:
  revealjs:
    theme:
      - scss/slides.scss
      - scss/utilities.scss
      - scss/typewriter.scss
      - scss/hexagon.scss
    width: 100%
    height: 100%
    margin: 0
    code-copy: false
    code-line-numbers: false
    slide-number: c
    highlight-style: github

engine: knitr

knitr:
  opts_chunk:
    collapse: true
    comment: "#>"

editor:
  render-on-save: true
---

```{r setup, include=FALSE}
library(epoxy)
library(glue)

options(width = 120)
source("R/utils.R")
```

## {background-image="images/kids.jpg" background-size="cover" background-position="center" background-repeat="no-repeat"}

##

::: {.content-center .text-center}
::: quote-sans
<div>Infant day care costs</div>
<div>up to [$15,417]{.text-orange} a year</div>
:::
:::

::: notes
I want to share a interesting fact I read recently.
Did you know that...

Your first thought is probably, "woah, children are expensive!"
And as a parent, I can say. Yeah, you're right.

But also as a parent, I know that this isn't just a boring statistic from an executive report.
Behind this number are real conversations I've had with my partner as we figure out how we'll care for our children and provide for them too.

As a data scientist, though, I bet we're all wondering "how did that number get there?"
Is that an average or a mean? Where did the data come from exactly?
(It's from the US Dept. of Labor's National Database of Childcare Price, by the way.)

As someone who's spent a lot of time working on reporting tools for data scientists, I really mean it.
Like "how _exactly_ did that number get there?"
:::

## {.p-9}

<!-- type out quote up to number -->

::: {.content-center}
::: quote-sans
<div class="d-if"><div class="d-ib typewriter" data-id="preamble" style="--steps:22;--blinks:0">Infant day care costs</div></div><br>
<div class="d-if"><div class="d-ib typewriter" data-id="before" style="--steps:6;--delay:1680ms;--blinks:50">up to&nbsp;</div></div>
:::
:::


## {.p-9}

<!-- copy paste the number -->

::: {.content-center}
::: quote-sans
<div class="d-ib" data-id="preamble">Infant day care costs</div> \
<div class="d-ib" data-id="before">up to</div>
<div class="d-if" style="width:min-content"><div class="d-ib text-orange typewriter" data-id="var" style="--duration:500ms;--steps:1;--blinks:2">$15,417</div></div>
<div class="d-if"><div class="d-ib typewriter" data-id="after" style="--delay:2s;--steps:5;--blinks:3">a year</div></div>
:::
:::

## {auto-animate="true"}

<!-- now in an Rmd -->

:::: {.content-center}

::: {.code-chunk .fs-3vw .offscreen-up data-id="code-chunk"}
&#x60;&#x60;&#x60;{r} \
max_med_cost <- \
&nbsp;&nbsp;childcare_costs |> \
&nbsp;&nbsp;[# group and summarize... |>]{.text-muted} \
&nbsp;&nbsp;filter(cost = max(cost)) |> \
&nbsp;&nbsp;pull(cost) \ \
&#x60;&#x60;&#x60;
:::

::: {.d-flex .flex-column .align-items-center}
::: {.quote-code}
<div class="d-if"><div class="d-ib typewriter" data-id="preamble" style="--steps:22;--blinks:0">Infant day care costs</div></div><br>
<div class="d-if"><div class="d-ib typewriter" data-id="before" style="--steps:6;--delay:1680ms;--blinks:50">up to&nbsp;</div></div>
<div>&nbsp;<!-- placeholder for last line --></div>
:::
:::
::::

## {.p-10 auto-animate="true"}

<!-- reveal code chunk -->

:::: {.content .d-flex .flex-column .justify-content-center}

::: {.code-chunk .mb-6 style="font-size: 3vw;" data-id="code-chunk"}
&#x60;&#x60;&#x60;{r} \
max_med_cost <- \
&nbsp;&nbsp;childcare_costs |> \
&nbsp;&nbsp;[# group and summarize... |>]{.text-muted} \
&nbsp;&nbsp;filter(cost = max(cost)) |> \
&nbsp;&nbsp;pull(cost) \ \
&#x60;&#x60;&#x60;
:::

::: {.quote-code style="font-size: clamp(2rem, 3vw, 8rem); line-height: 1.2;"}
<div>Infant day care costs</div>
<div class="d-if"><div class="typewriter" style="--steps:1;--duration:10ms;--blinks:50">up to&nbsp;</div></div>
<div>&nbsp;<!-- placeholder for last line --></div>
:::
::::



## {.p-10 auto-animate="true" auto-animate-unmatched="false"}

<!-- highlight variable and type it out -->

:::: {.content .d-flex .flex-column .justify-content-center}

::: {.code-chunk .mb-6 style="font-size: 3vw;" data-id="code-chunk"}
&#x60;&#x60;&#x60;{r} \
[max_med_cost]{.text-orange .fw-6} <- \
&nbsp;&nbsp;childcare_costs |> \
&nbsp;&nbsp;[# group and summarize... |>]{.text-muted} \
&nbsp;&nbsp;filter(cost = max(cost)) |> \
&nbsp;&nbsp;pull(cost) \ \
&#x60;&#x60;&#x60;
:::

::: {.quote-code style="font-size: clamp(2rem, 3vw, 8rem); line-height: 1.2;" data-id="quote"}
<div>Infant day care costs</div>
<div>up to
<div class="d-if"><div class="d-ib typewriter" style="--delay:1s;--steps:17;--blinks:0;">[&#x60;r [max_med_cost]{.text-orange}&#x60;]{.text-blue}</div></div>
</div>
<div><div class="d-if"><div class="d-ib typewriter" style="--delay:2360ms;--steps:6;--blinks:2;">a year.</div></div></div>
:::
::::

## {.p-10 auto-animate="true"}

<!-- promise and magic of rmd -->

:::: {.content .d-flex .flex-column .justify-content-center}

::: {.quote-code .text-muted data-id="quote"}
<div>Infant day care costs</div>
<div>up to [&#x60;r [max_med_cost]{.text-orange}&#x60;]{.text-blue}</div>
<div>a year.</div>
:::
::::

::: notes
This is the promise and magic of R Markdown.

* prose in same document as code
* reproducible writing
* update data or analysis and re-render
* output changes!

When rendered, max median cost is woven into the prose...
:::

## {.p-10 transition="fade"}

<!-- rendered version of the document, number isn't great -->

:::: {.content-center}

```{r}
#| include: false
max_med_cost <- 15416.96
```

::: {.quote-sans style="color: var(--gray-7);"}
<div>Infant day care costs</div>
<div>up to [`r max_med_cost`]{.text-orange .d-ib data-id="quote-var"}</div>
<div data-id="final">a year.</div>
:::
::::

::: notes
There's a lot to love about R Markdown,
:::

## {.p-10 transition="fade"}

::: {.content-center}
::: {.quote-sans style="color: var(--gray-7);"}
<div>Infant day care costs</div>
<div>up to [$15,416]{.text-orange .d-ib data-id="quote-var"}</div>
<div>a year.</div>
:::
:::

## {.p-10 .bg-gradient-deep-blue transition="fade" transition-speed="slow"}

::: {.hex-content}
<div class="hexagon">
  <div class="front reveal-up"></div>
</div>

::: {.incremental}
- Powerful inline syntax
- Blend data and prose
- Reusable templates
:::
:::

## {.p-10 .bg-gradient-deep-blue}

::: {.hex-content}
<div class="hexagon spin-flip">
  <div class="front"></div>
  <div class="back"></div>
</div>

::: {.incremental}
- Made for developers
- Very light-weight
- Files that end in `.R`
:::
:::

## {.p-10 .bg-gradient-deep-blue}

::: {.hex-content}
<div class="hexagon quick-flip-back">
  <div class="front"></div>
  <div class="back"></div>
</div>

::: {.incremental}
- Made for data scientists
- Using familiar packages
- Scripts, reports, apps
:::
:::

::: notes
* effective communication
* without taking you out of the flow of writing
:::

## {.p-10 visibility="hidden"}

::: content-center

```{r}
#| echo: false
fake_chunk(
  engine = "epoxy",
  "Infant day care costs
up to {.dollar max_med_cost}
a year."
)
```

* From Rmd text, wrap the text in an epoxy chunk
* replace back-tick r with braces
* Insert the `.dollar` formatter
* render...

:::

## {.p-10 transition="fade"}

::: {.content-center}

::: {.ff-mono .fs-5vw}
&nbsp; \
Infant day care costs \
up to &#x60;r max_med_cost&#x60; \
a year. \
&nbsp;
:::
:::

## {.p-10 transition="fade"}

::: {.content-center}

::: {.code-chunk .fs-5vw .text-gray-6 style="margin-bottom: 0;"}
[&#x60;&#x60;&#x60;{[epoxy]{.text-orange}}]{.text-gray-12} \
Infant day care costs \
up to &#x60;r max_med_cost&#x60; \
a year. \
[&#x60;&#x60;&#x60;]{.text-gray-12}
:::
:::

## {.p-10 transition="fade"}

::: {.content-center}

::: {.code-chunk .fs-5vw .text-gray-6 style="margin-bottom: 0;"}
&#x60;&#x60;&#x60;{epoxy} \
Infant day care costs \
up to [[&#x60;r]{.text-orange} max_med_cost[&#x60;]{.text-orange}]{.text-gray-12} \
a year. \
&#x60;&#x60;&#x60;
:::
:::

## {.p-10 transition="fade"}

::: {.content-center}

::: {.code-chunk .fs-5vw .text-gray-6 style="margin-bottom: 0;"}
&#x60;&#x60;&#x60;{epoxy} \
Infant day care costs \
up to [{]{.text-orange}[max_med_cost]{.text-gray-12}[}]{.text-orange} \
a year. \
&#x60;&#x60;&#x60;
:::
:::

## {.p-10 transition="fade"}

::: {.content-center}

::: {.code-chunk .fs-5vw .text-gray-6 style="margin-bottom: 0;"}
&#x60;&#x60;&#x60;{epoxy} \
Infant day care costs \
up to [{[.dollar]{.text-orange} max_med_cost}]{.text-gray-12} \
a year. \
&#x60;&#x60;&#x60;
:::
:::

## {.p-10 transition="fade"}

::: content-center
::: quote-sans
<div>Infant day care costs</div>
<div>up to [$15,417]{.text-orange} a year</div>
:::
:::

<!---------- Walk from glue() to epoxy() -------------------------------------->

## {.p-10 .glue-to-epoxy auto-animate="true"}

::: content-center
```{r}
#| echo: true
glue(
  "{max_med_cost}"
)
```
:::

## {.p-10 .glue-to-epoxy auto-animate="true"}

::: content-center
```{r}
#| echo: true
glue(
  "{max_med_cost}",
  .transformer = identity_transformer
)
```
:::

## {.p-10 .glue-to-epoxy auto-animate="true"}

::: content-center
```{r}
#| echo: true
glue(
  "{max_med_cost}",
  .transformer = epoxy_transform_inline()
)
```
:::

## {.p-10 .glue-to-epoxy auto-animate="true"}

::: content-center
```{r}
#| echo: true
glue(
  "{.dollar max_med_cost}",
  .transformer = epoxy_transform_inline()
)
```
:::

## {.p-10 .glue-to-epoxy auto-animate="true"}

::: content-center
```{r}
#| echo: true
epoxy("{.dollar max_med_cost}")
```
:::

<!---------- Reveal other inline transformers --------------------------------->

## {.p-10 visibility="hidden"}

```{r}
#| include: false
childcare_summary <- readr::read_rds("data-raw/childcare_summary_top_10.rds")

attach(childcare_summary[1, ])
```

::: {.content-center .fs-2vw}

Reveal sequentially, in this order...

```{epoxy .data = childcare_summary[1, ]}
| Variable | Value | Inline | Result |
|:---------|:------|:-------|:-------|
| `max_med_cost` | {max_med_cost} | `.dollar` | {.dollar max_med_cost} |
| `mhi_pct` | {mhi_pct} | `.percent` | {.percent mhi_pct} |
| `county_pop_med` | {county_pop_med} | `.comma` | {.comma county_pop_med} |
| `cost_rank` | {cost_rank} | `.ordinal` | {.ordinal cost_rank} |
| `age` | {age} | `.titlecase` | {.titlecase age} |
| `county_size` | {county_size} | `.strong` | {.strong county_size} |
| `type` | {type} | `.emph` | {.emph type} |
```

:::

## {.inline-examples}

::::: {.content-center .align-items-center}
:::: {.w-66}
::: {.fragment data-fade-from="2"}
<code>{<span class="fragment">.dollar </span>max_med_cost}</code>
<code class="float-right" data-show-on="0">`r max_med_cost`</code>
<code class="float-right" data-show-from="1">`r epoxy("{.dollar max_med_cost}")`</code>
:::

::: {.fragment data-fade-from="4"}
<code>{<span class="fragment">.percent </span>mhi_pct}</code>
<code class="float-right" data-show-on="2">`r mhi_pct`</code>
<code class="float-right" data-show-from="3">`r epoxy("{.percent mhi_pct}")`</code>
:::

::: {.fragment data-fade-from="6"}
<code>{<span class="fragment">.comma </span>county_pop_med}</code>
<code class="float-right" data-show-on="4">`r county_pop_med`</code>
<code class="float-right" data-show-from="5">`r epoxy("{.comma county_pop_med}")`</code>
:::

::: {.fragment data-fade-from="8"}
<code>{<span class="fragment">.ordinal </span>cost_rank}</code>
<code class="float-right" data-show-on="6">`r cost_rank`</code>
<code class="float-right" data-show-from="7">`r epoxy("{.ordinal cost_rank}")`</code>
:::

::: {.fragment data-fade-from="10"}
<code>{<span class="fragment">.titlecase </span>age}</code>
<code class="float-right" data-show-on="8">`r age`</code>
<code class="float-right" data-show-from="9">`r epoxy("{.titlecase age}")`</code>
:::

::: {.fragment data-fade-from="12"}
<code>{<span class="fragment">.strong </span>county_size}</code>
<code class="float-right" data-show-on="10">`r county_size`</code>
<code class="float-right" data-show-from="11">`r epoxy("{.strong county_size}")`</code>
:::

::: {.fragment}
<code>{<span class="fragment">.emph </span>type}</code>
<code class="float-right" data-show-on="12">`r type`</code>
<code class="float-right" data-show-from="13">`r epoxy("{.emph type}")`</code>
:::
::::
:::::


## {.p-9}

::::: {.content-center .align-items-center}
:::: {.w-80}
```{r}
#| echo: false
fake_chunk(
  engine = "epoxy",
  opts_head = "cost-summary",
  '<span class="text-yellow">{.titlecase age}</span> <span class="text-mint">{type}</span> in <span class="text-red">{county_size}</span> counties
ranks <span class="text-orange">{.ordinal cost_rank}</span> in childcare costs
at <span class="text-blue">{.dollar max_med_cost}</span> per year,
or <span class="text-pink">{.percent mhi_pct}</span> of median household income.'
)
```


```{epoxy cost-summary, .data = childcare_summary[1, ], eval = FALSE, include = FALSE}
{.titlecase age} {type} in {county_size} counties
ranks {.ordinal cost_rank} in childcare costs
at {.dollar max_med_cost} per year,
or {.percent mhi_pct} of median household income.
```

::: epoxy-ex-output
[Infant]{.bg-yellow} [day care]{.bg-mint} in [very large]{.bg-red} counties ranks [1st]{.bg-orange} in childcare costs at [$15,416.96]{.bg-blue} per year, or [24%]{.bg-pink} of median household income.
:::
::::
:::::

::: notes
Write out a full sentence using these variables in an epoxy chunk.

There are still a few things that bug me about the formatting in this sentence, though.
:::


## {.p-10}

Let's make our own inline transformer.

```{r}
#| echo: true
epoxy_transform_set(
  .cpm = function(x) x / 12,
)
```

````{verbatim cost-summary-cpm-verbatim}
```{epoxy cost-summary}
{.titlecase age} {type} in {county_size} counties
ranks {.ordinal cost_rank} in childcare costs
at {.dollar max_med_cost} per year,
about {.dollar {.cpm max_med_cost}} per month
or {.percent mhi_pct} of median household income.
```
````

```{epoxy cost-summary-cpm, .data = childcare_summary[1, ]}
{.titlecase age} {type} in {county_size} counties
ranks {.ordinal cost_rank} in childcare costs
at {.dollar max_med_cost} per year,
about {.dollar {.cpm max_med_cost}} per month
or {.percent mhi_pct} of median household income.
```


## {.p-10}

What if you want to change the default behavior?

Behind the scenes, inline transformers are tiny functions that take a single input
and return text.

* `.dollar` is `scales::label_dollar()`
* `.percent` is `scales::label_percent()`

## Use `epoxy_transform_set()` {.p-10}

```{r}
#| echo: true
epoxy_transform_set(
  .cpm = function(x) x / 12,
  .dollar = scales::label_dollar(accuracy = 100),
  .percent = scales::label_percent(accuracy = 0.1)
)
```

```{verbatim ref.label="cost-summary-cpm-verbatim"}
```

```{r}
epoxy_use_chunk(label = "cost-summary-cpm")
```

## {.p-10}

<!-- of course we probably have this in a data frame -->

::: {.content-center style="font-size:1.4vw;"}
```{r}
#| echo: true
childcare_summary
```
:::

## {.p-10}

````{verbatim}
```{epoxy cost-summary, .data = childcare_summary[1, ]}
{.titlecase age} {type} in {county_size} counties
ranks {.ordinal cost_rank} in childcare costs
at {.dollar max_med_cost} per year,
or {.percent mhi_pct} of median household income.
```
````

```{r}
epoxy_use_chunk(label = "cost-summary")
```

::: {.notes}
Update the epoxy chunk to use the `.data` argument
and the first row of `childcare_summary`
(these are the values)

```{epoxy .data = childcare_summary[1, ]}
| Variable | Value | Inline | Result |
|:---------|:------|:-------|:-------|
| `max_med_cost` | {max_med_cost} | `.dollar` | {.dollar max_med_cost} |
| `mhi_pct` | {mhi_pct} | `.percent` | {.percent mhi_pct} |
| `county_pop_med` | {county_pop_med} | `.number` | {.comma county_pop_med} |
| `cost_rank` | {cost_rank} | `.ordinal` | {.ordinal cost_rank} |
| `age` | {age} | `.titlecase` | {.titlecase age} |
| `county_size` | {county_size} | `.strong` | {.strong county_size} |
| `type` | {type} | `.emph` | {.emph type} |
```
:::


## {.p-10}

````{verbatim}
```{epoxy cost-summary-8th, .data = childcare_summary[8, ]}
{.titlecase age} {type} in {county_size} counties
ranks {.ordinal cost_rank} in childcare costs
at {.dollar max_med_cost} per year,
or {.percent mhi_pct} of median household income.
```
````

```{r}
epoxy_use_chunk(childcare_summary[8, ], label = "cost-summary")
```

::: {.notes}
then swap out for the 8th row
which effectively compares day care to home care

```{epoxy .data = childcare_summary[8, ]}
| Variable | Value | Inline | Result |
|:---------|:------|:-------|:-------|
| `max_med_cost` | {max_med_cost} | `.dollar` | {.dollar max_med_cost} |
| `mhi_pct` | {mhi_pct} | `.percent` | {.percent mhi_pct} |
| `county_pop_med` | {county_pop_med} | `.number` | {.comma county_pop_med} |
| `cost_rank` | {cost_rank} | `.ordinal` | {.ordinal cost_rank} |
| `age` | {age} | `.titlecase` | {.titlecase age} |
| `county_size` | {county_size} | `.strong` | {.strong county_size} |
| `type` | {type} | `.emph` | {.emph type} |
```
:::

## {.p-10}

````{verbatim}
```{r}
childcare_summary |>
  filter(
    age == "infant",
    county_size == "very large",
    type == "home care"
  ) |>
  epoxy_use_chunk(label = "cost-summary")
```
````

```{r}
childcare_summary |>
  dplyr::filter(
    age == "infant",
    county_size == "very large",
    type == "home care"
  ) |>
  epoxy_use_chunk(label = "cost-summary")
```

## {.p-10}

```{r}
childcare_summary |>
  dplyr::filter(
    age == "infant",
    county_size == "very large"
  ) |>
  epoxy_use_chunk(label = "cost-summary")
```
